<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="chatMapper">
	<resultMap id="chatRoomResultMap" type="chatRoomVO">
	    <result property="roomId" column="ROOM_ID" />
	    <result property="ucSeq" column="UC_SEQ" />
	    <result property="userNo" column="USER_NO" />
	    <result property="createdAt" column="CREATED_AT" />
    	<result property="lastMessageAt" column="LAST_MESSAGE_AT" />
	</resultMap>
	
	<resultMap id="chatResultMap" type="chat">
	    <result property="messageId" column="MESSAGE_ID" />
	    <result property="roomId" column="ROOM_ID" />
	    <result property="senderType" column="SENDER_TYPE" />
	    <result property="message" column="MESSAGE" />
	    <result property="sentAt" column="SENT_AT" />
	    <result property="userNo" column="USER_NO" />
	    <result property="ucSeq" column="UC_SEQ" />
	    <result property="unread_count" column="UNREAD_COUNT" />
	</resultMap>

	 <!-- 채팅방 조회 -->
    <select id="getChatRoom" parameterType="string" resultMap="chatRoomResultMap">
        SELECT * FROM CHAT_ROOM WHERE ROOM_ID = #{roomId}
    </select>

    <!-- 채팅방 생성 -->
    <insert id="createChatRoom" parameterType="chatRoomVO">
        INSERT INTO CHAT_ROOM (ROOM_ID, UC_SEQ, USER_NO, CREATED_AT)
        VALUES (#{roomId}, #{ucSeq}, #{userNo}, CURRENT_TIMESTAMP)
    </insert>

    <!-- 특정 채팅방의 메시지 목록 조회 -->
    <select id="getMessages" parameterType="string" resultMap="chatResultMap">
        SELECT * FROM CHAT WHERE ROOM_ID = #{roomId} ORDER BY SENT_AT
    </select>

    <!-- 메시지 저장 -->
    <insert id="saveMessage" parameterType="chat">
        INSERT INTO CHAT (MESSAGE_ID, ROOM_ID, SENDER_TYPE, MESSAGE, SENT_AT ,USER_NO, UC_SEQ, READ)
        VALUES (message_id_seq.NEXTVAL, #{roomId}, #{senderType}, #{message}, #{sentAt}, #{userNo}, #{ucSeq}, #{unread_count})
    </insert>
    
    
    <select id="checkNewChat" parameterType="chat" resultMap="chatResultMap">
		<!--
		  이 쿼리는 각 채팅방의 최신 메시지를 조회하고, 사용자(SENDER_TYPE = 'user')로부터 
		  온 읽지 않은 메시지의 수를 계산합니다. UC_SEQ(매장 ID)로 필터링합니다.
		-->
		WITH LatestChat AS (
		    SELECT 
		        C.MESSAGE_ID,
		        C.ROOM_ID,
		        C.USER_NO,
		        C.MESSAGE,
		        C.SENDER_TYPE,
		        C.SENT_AT,
		        C.UC_SEQ,
		        C.READ,  <!-- 0: 읽지 않음, 1: 읽음 -->
		        ROW_NUMBER() OVER (PARTITION BY C.ROOM_ID ORDER BY C.SENT_AT DESC) AS rn
		    FROM 
		        CHAT C
		    WHERE 
		        C.UC_SEQ = #{ucSeq}  <!-- 특정 매장의 UC_SEQ로 필터링 -->
		)
		SELECT 
		    L.MESSAGE_ID,
		    L.ROOM_ID,
		    CASE 
		        WHEN L.SENDER_TYPE = 'user' THEN U.USER_NAME
		        ELSE '식당'
		    END AS SENDER_NAME,
		    L.MESSAGE,
		    L.SENDER_TYPE,
		    L.SENT_AT,
		    L.UC_SEQ,
		    <!-- 각 방에서 사용자로부터 온 읽지 않은 메시지의 수를 계산 -->
		    (
		        SELECT COUNT(*) 
		        FROM CHAT 
		        WHERE ROOM_ID = L.ROOM_ID 
		          AND READ = 0  <!-- 읽지 않은 메시지만 계산 -->
		          AND SENDER_TYPE = #{senderType}  <!-- 사용자(SENDER_TYPE = 'user')가 보낸 메시지만 계산 -->
		    ) AS unread_count  <!-- 읽지 않은 메시지 수 -->
		FROM 
		    LatestChat L
		LEFT JOIN 
		    USERS U ON L.USER_NO = U.USER_NO AND L.SENDER_TYPE = 'user'
		WHERE 
		    L.rn = 1  <!-- 각 채팅방에서 최신 메시지만 선택 -->
		ORDER BY 
		    L.SENT_AT DESC
    	
    </select>
    
    <update id="readMessage" parameterType="chat">
    	UPDATE 
    			CHAT
    	
		SET 	READ = 1
		
		WHERE 
				SENDER_TYPE = #{senderType}
		 AND 
		 		READ = 0
		 AND  
		 		ROOM_ID = #{roomId}
    </update>

</mapper>